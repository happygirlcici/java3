/*Edit by CC
Feb 24 2017*/
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ipd
 */
public class JNotepad extends javax.swing.JFrame {

    File currentFile = new File("C:\\untitled.txt");
    boolean isModified = false;
    JFrame frame = new JFrame("New Frame"); 
    
    //frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE); 

    public JNotepad() {
        initComponents();
        // center window on the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        textArea.getDocument().addDocumentListener(new MyDocumentListener());
        
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        
        //frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
        //WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        
        //Windows Closed 
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        /*
        frame.addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent we) {
            //saveAndExit();
            //WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
            setVisible(false);
            System.out.println("Windows Close");
            saveAs();
           // dispose();
         }
     }
     
);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooserOpen = new javax.swing.JFileChooser();
        fileChooserSave = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miOpen = new javax.swing.JMenuItem();
        miSaveAs = new javax.swing.JMenuItem();
        miClose = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        SaveExit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        miColor = new javax.swing.JMenuItem();
        ckWordWrap = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 24));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 24));
        jPanel1.setPreferredSize(new java.awt.Dimension(774, 24));

        lblStatus.setText("(no file)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblStatus))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        textArea.setLineWrap(true);
        textArea.setRows(25);
        textArea.setWrapStyleWord(true);
        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(textArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open ...");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miOpen);

        miSaveAs.setText("Save as ...");
        miSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveAs);

        miClose.setText("Clear");
        miClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseActionPerformed(evt);
            }
        });
        jMenu1.add(miClose);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miSave);

        SaveExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        SaveExit.setText("Quit");
        SaveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveExitActionPerformed(evt);
            }
        });
        jMenu1.add(SaveExit);
        jMenu1.add(jSeparator1);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuItem1.setText("ExitDirectly");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Setting");

        miColor.setText("Color");
        miColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miColorActionPerformed(evt);
            }
        });
        jMenu2.add(miColor);

        ckWordWrap.setSelected(true);
        ckWordWrap.setText("Word Wrap");
        ckWordWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckWordWrapActionPerformed(evt);
            }
        });
        jMenu2.add(ckWordWrap);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        fileChooserOpen.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        
        if (fileChooserOpen.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                currentFile = fileChooserOpen.getSelectedFile();
                // FIXME: what happens if we can't read the file?
                String content = new Scanner(currentFile).useDelimiter("\\Z").next();
                textArea.setText(content);
                lblStatus.setText("Current file: " + currentFile.getAbsolutePath());
            } catch (IOException ex) {
                currentFile = null;
                JOptionPane.showMessageDialog(this,
                        "Unable to read file contents from " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveAsActionPerformed
        saveAs();
        lblStatus.setText(currentFile.getAbsolutePath() + " is saved.");
        isModified = false;
    }//GEN-LAST:event_miSaveAsActionPerformed


    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed

        if (isModified) {
            Object[] options = {"Save",
                "Don't Save",
                "Cancel"};
            int n = JOptionPane.showOptionDialog(this,
                    "Do you want to save changes to current file? ",
                    "Save file Question",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            if (n == 0) {
                try (PrintWriter pw = new PrintWriter(currentFile)) {
                    pw.write(textArea.getText());
                    lblStatus.setText(currentFile.getAbsolutePath() + " is saved.");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this,
                            "Unable to write file contents to " + currentFile.getAbsolutePath(),
                            "File access error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else if (n == 2) {
                return;
            }
        }
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseActionPerformed
        // TODO add your handling code here:
        textArea.setText(null);
        currentFile = null;
        isModified = true;
    }//GEN-LAST:event_miCloseActionPerformed


    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        try (PrintWriter pw = new PrintWriter(currentFile)) {
            pw.write(textArea.getText());
            lblStatus.setText(currentFile.getAbsolutePath() + " is saved.");
            isModified = false;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Unable to write file contents to " + currentFile.getAbsolutePath(),
                    "File access error",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_miSaveActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_formWindowClosed

    private void SaveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveExitActionPerformed

        saveAndExit();
       
    }//GEN-LAST:event_SaveExitActionPerformed

    private void miColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miColorActionPerformed
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Colors", Color.BLUE);
        textArea.setForeground(color);
        
    }//GEN-LAST:event_miColorActionPerformed

    private void ckWordWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckWordWrapActionPerformed
        // TODO add your handling code here:
        final JCheckBox ckWordWrap = new JCheckBox( "word wrap" );
        
        ckWordWrap.setSelected( textArea.getWrapStyleWord() );
        ckWordWrap.addItemListener( new ItemListener() {
          @Override
          public void itemStateChanged( ItemEvent e ) {
            textArea.setWrapStyleWord( ckWordWrap.isSelected() );
          }
        } );
        //testFrame.add( wordWrap, BorderLayout.NORTH );
    }//GEN-LAST:event_ckWordWrapActionPerformed

    //////////////////////////////////////////////////////////////
    //1. for documentListener the textArea is been changed or not
    class MyDocumentListener implements DocumentListener {

        String newline = "\n";

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateLog(e, "inserted into");
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateLog(e, "removed from");
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            //Plain text components do not fire these events
        }

        public void updateLog(DocumentEvent e, String action) {
            isModified = true;
            lblStatus.setText(currentFile.getAbsolutePath() + "  is modified.");
        }
    }
    
private void saveAndExit(){
    int n = JOptionPane.showConfirmDialog(
            frame,
                "Save your file?",
                "An Inane Question",
                 JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            
            fileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
            if (fileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooserSave.getSelectedFile();
                try (PrintWriter pw = new PrintWriter(currentFile)) {
                    pw.write(textArea.getText());
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }
        } else if (n == JOptionPane.NO_OPTION) 
        {
           dispose();
        }
}
        
        
    private void saveAs(){ 
        fileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        //+".txt"
        if (fileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
       if(!filePath.endsWith(".txt")) {
            currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                pw.write(textArea.getText());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }
    
private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isModified) {
            Object[] options = {"Save",
                "Don't Save",
                "Cancel"};
            int n = JOptionPane.showOptionDialog(this,
                    "Do you want to save changes to current file? ",
                    "File save or not Question",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[2]);
            if (n == 0) {
                try (PrintWriter pw = new PrintWriter(currentFile)) {
                    pw.write(textArea.getText());
                    lblStatus.setText(currentFile.getAbsolutePath() + "is saved.");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this,
                            "Unable to write file contents to " + currentFile.getAbsolutePath(),
                            "File access error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else if (n == 2) {
                this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                return;
            }
        }
        dispose();
    }//GEN-LAST:event_formWindowClosing

private void docModifed(boolean isModified){

}
//////////////////////////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JNotepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JNotepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem SaveExit;
    private javax.swing.JCheckBoxMenuItem ckWordWrap;
    private javax.swing.JFileChooser fileChooserOpen;
    private javax.swing.JFileChooser fileChooserSave;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenuItem miClose;
    private javax.swing.JMenuItem miColor;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miSaveAs;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
