
public class ToDoListSqlite extends javax.swing.JFrame {

    /**
     * Creates new form ToDoListSqlite
     */
    public ToDoListSqlite() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTaskName = new javax.swing.JTextField();
        cbTaskStatusFinished = new javax.swing.JCheckBox();
        jxDpTaskDate = new org.jdesktop.swingx.JXDatePicker();
        btAdd = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTask = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Task");

        tfTaskName.setText("buy milk");

        cbTaskStatusFinished.setText("Finished");
        cbTaskStatusFinished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTaskStatusFinishedActionPerformed(evt);
            }
        });

        jxDpTaskDate.setToolTipText("Choose Date");
        jxDpTaskDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jxDpTaskDateActionPerformed(evt);
            }
        });

        btAdd.setText("Add Task");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btRefresh.setText("Refresh");
        btRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefreshActionPerformed(evt);
            }
        });

        jListTask.setModel(listModelTask);
        jListTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jListTaskMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jListTask);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbTaskStatusFinished)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jxDpTaskDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfTaskName, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(btRefresh))
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfTaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAdd)
                    .addComponent(btSearch)
                    .addComponent(btRefresh))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbTaskStatusFinished)
                            .addComponent(jxDpTaskDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbTaskStatusFinishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTaskStatusFinishedActionPerformed
        // TODO add your handling code here:

        String st = cbTaskStatusFinished.getActionCommand();
        System.out.println("task status is " + st);
    }//GEN-LAST:event_cbTaskStatusFinishedActionPerformed

    private void jxDpTaskDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jxDpTaskDateActionPerformed
        // TODO add your handling code here:
        Date taskDate = jxDpTaskDate.getDate();
        //System.out.println("taskDate is "+ taskDate);
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        jxDpTaskDate.setFormats(dateFormat);
        DateFormat sysDate = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        date_to_store = sysDate.format(jxDpTaskDate.getDate()).toString();
        //System.out.println("date_to_store is "+ date_to_store);
    }//GEN-LAST:event_jxDpTaskDateActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        String taskName = tfTaskName.getText();
        // String cbUnfinished = cbTaskStatusUnfinished.getActionCommand();
        String cbFinished = cbTaskStatusFinished.getActionCommand();
        String cbTaskStatusResult = "";
        cbTaskStatusResult = (!cbFinished.isEmpty() ? "Finished" : "Unfinished");
        System.out.println("cbTaskResult is " + cbTaskStatusResult);

        try {
            db.addTask(taskName, date_to_store, cbTaskStatusResult);
            refreshTaskList();
            tfTaskName.setText("");
            //tfTaskStatus.setText("unfinshed");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Failed execute database query",
                "Database error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jFileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));

        if (jFileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jFileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
            if (!filePath.endsWith(".txt")) {
                currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {

                int[] selectedIndexList = jListTask.getSelectedIndices();
                for (int idx : selectedIndexList) {
                    Task c = listModelTask.get(idx);
                    pw.write(c.toStringSaveFile());
                    //pw.printf("%s;%d;%0.2f;%s\n", c.makeModel, c.yop, c.secsTo100, c.plates);
                }
                System.out.println("Finished write file" + currentFile.getName());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                    "Unable to write file contents to " + currentFile.getAbsolutePath(),
                    "File access error",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        // TODO add your handling code here:
        String str_search = tfTaskName.getText();
        System.out.println("str_search is " + str_search);
        refreshTaskList();
        listModelTask.clear();

        try {
            length = db.getCountTaskByName(str_search);
            System.out.println("length is " + length);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this,
                "Failed execute database select Count Task By Name",
                "Database error",
                JOptionPane.ERROR_MESSAGE);
        }
        if (length == 1) {
            try {
                t = db.getTaskByName(str_search);
                System.out.println("Found 1 row");
                System.out.println("t is " + t.toStringSaveFile());
                //listModelTask.clear();
                listModelTask.addElement(t);

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this,
                    "Failed execute database select ",
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
            }
        } else if (length == 0) {
            String result_str = "Not founded";
            System.out.println(result_str);
            //listModelTask.clear();
            JOptionPane.showMessageDialog(this,
                "Not Founded",
                "Database Query",
                JOptionPane.INFORMATION_MESSAGE);
        } else if (length > 1) {
            String result_str = "Many rows founde!";
            System.out.println(result_str);
            try {
                ArrayList<Task> taskResultList = db.getTasksByName(str_search);
                System.out.println("taskResultList is " + taskResultList);
                if (taskResultList.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "Failed execute database select Many taskResultList is empty",
                        "Database error",
                        JOptionPane.ERROR_MESSAGE);
                } else {
                    for (int i = 0; i < length; i++) {
                        //t = db.getTaskByName(str_search);
                        t = taskResultList.get(i);
                        System.out.println("i = " + i);
                        listModelTask.addElement(t);
                    }
                }
                // listModelTask.addElement(taskResultList.get(i));

                System.out.println("Found " + length + " rows ");
                // System.out.println("t is "+t.toStringSaveFile());

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this,
                    "Failed execute database select Many",
                    "Database error",
                    JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_btSearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefreshActionPerformed
        // TODO add your handling code here:
        refreshTaskList();
    }//GEN-LAST:event_btRefreshActionPerformed

    private void jListTaskMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTaskMousePressed
        // TODO add your handling code here:
        if ((evt.getButton() == MouseEvent.BUTTON3) && (evt.getClickCount() == 1)) {
            jListTask.setSelectedIndex(jListTask.locationToIndex(evt.getPoint()));
            if (jListTask.getSelectedIndex() != -1) {
                popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
            }
        }
    }//GEN-LAST:event_jListTaskMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ToDoListSqlite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ToDoListSqlite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ToDoListSqlite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ToDoListSqlite.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ToDoListSqlite().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btRefresh;
    private javax.swing.JButton btSearch;
    private javax.swing.JCheckBox cbTaskStatusFinished;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<Task> jListTask;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker jxDpTaskDate;
    private javax.swing.JTextField tfTaskName;
    // End of variables declaration//GEN-END:variables
}
