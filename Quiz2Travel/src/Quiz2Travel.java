/*Quiz2 March 2 */
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Quiz2Travel extends javax.swing.JFrame {

    /**
     * Creates new form Quiz2Travel DefaultListModel<Trip> listModeTrip = new
     * DefaultListModel<>();
     */
    DefaultListModel<Trip> listModelTrip = new DefaultListModel<>();

    public Quiz2Travel() {
        initComponents();

        lblDesErr.setVisible(false);
        lblTravelNameErr.setVisible(false);
        lblPassportNoErr.setVisible(false);
        lblDepDateErr.setVisible(false);
        lblDepDateErr.setVisible(false);
        lblRetDateErr.setVisible(false);

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        centerOnParent(dlgAddTrip, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");
    File currentFile = new File("C:\\untitled.txt");
    Date dateRetDate;
    Date dateDepDate;
    //Date dateRetDate = Mon Jan 01 00:00:00 EST 2001;

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dlgAddTrip = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dlgAdd = new javax.swing.JButton();
        tfDestination = new javax.swing.JTextField();
        lblDesErr = new javax.swing.JLabel();
        lblTravelNameErr = new javax.swing.JLabel();
        tfTravelName = new javax.swing.JTextField();
        tfPassNo = new javax.swing.JTextField();
        lblPassportNoErr = new javax.swing.JLabel();
        lblDepDateErr = new javax.swing.JLabel();
        tfDepDate = new javax.swing.JTextField();
        tfRetDate = new javax.swing.JTextField();
        lblRetDateErr = new javax.swing.JLabel();
        lblDepDateBigErr = new javax.swing.JLabel();
        jFileChooserSave = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListTravel = new javax.swing.JList<>();
        btSaveSelect = new javax.swing.JButton();
        btAddTrip = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        dlgAddTrip.setModal(true);

        jLabel1.setText("Destination");

        jLabel2.setText("Name");

        jLabel3.setText("Passport Number");

        jLabel4.setText("Departure Date");

        jLabel5.setText("Return Date");

        dlgAdd.setText("Add ");
        dlgAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlgAddActionPerformed(evt);
            }
        });

        tfDestination.setText("New York");

        lblDesErr.setForeground(new java.awt.Color(204, 0, 0));
        lblDesErr.setText("Destination Invalid");

        lblTravelNameErr.setForeground(new java.awt.Color(204, 0, 0));
        lblTravelNameErr.setText("Traveler Name Invalid");

        tfTravelName.setText("CC");

        tfPassNo.setText("AA123456");

        lblPassportNoErr.setForeground(new java.awt.Color(204, 0, 0));
        lblPassportNoErr.setText("Passport Number Invalid");

        lblDepDateErr.setForeground(new java.awt.Color(204, 0, 0));
        lblDepDateErr.setText("Departure Date Invalid");

        tfDepDate.setText("2001/01/01");
        tfDepDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDepDateActionPerformed(evt);
            }
        });

        tfRetDate.setText("2001/02/01");

        lblRetDateErr.setForeground(new java.awt.Color(204, 0, 0));
        lblRetDateErr.setText("Return Date Invalid");

        lblDepDateBigErr.setForeground(new java.awt.Color(204, 0, 0));
        lblDepDateBigErr.setText("Departurn date big");

        javax.swing.GroupLayout dlgAddTripLayout = new javax.swing.GroupLayout(dlgAddTrip.getContentPane());
        dlgAddTrip.getContentPane().setLayout(dlgAddTripLayout);
        dlgAddTripLayout.setHorizontalGroup(
            dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddTripLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(65, 65, 65)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dlgAddTripLayout.createSequentialGroup()
                        .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDesErr, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTravelName, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPassNo, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPassportNoErr, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDepDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(dlgAddTripLayout.createSequentialGroup()
                                .addComponent(lblDepDateErr, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(lblDepDateBigErr))
                            .addComponent(tfRetDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTravelNameErr, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRetDateErr, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(dlgAddTripLayout.createSequentialGroup()
                        .addComponent(tfDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dlgAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        dlgAddTripLayout.setVerticalGroup(
            dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dlgAddTripLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dlgAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDesErr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(tfTravelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTravelNameErr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(dlgAddTripLayout.createSequentialGroup()
                        .addComponent(tfPassNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPassportNoErr)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(dlgAddTripLayout.createSequentialGroup()
                        .addComponent(tfDepDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDepDateErr)
                            .addComponent(lblDepDateBigErr))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dlgAddTripLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(dlgAddTripLayout.createSequentialGroup()
                        .addComponent(tfRetDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblRetDateErr)))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Quiz2 Travel");

        jListTravel.setModel(listModelTrip);
        jListTravel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTravelMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListTravel);

        btSaveSelect.setText("Save Selected");
        btSaveSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveSelectActionPerformed(evt);
            }
        });

        btAddTrip.setText("Add Trip");
        btAddTrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddTripActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btSaveSelect)
                        .addGap(55, 55, 55)
                        .addComponent(btAddTrip, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSaveSelect)
                    .addComponent(btAddTrip)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAddTripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddTripActionPerformed
        // TODO add your handling code here:
        
        lblDesErr.setVisible(false);
        lblTravelNameErr.setVisible(false);
        lblPassportNoErr.setVisible(false);
        lblDepDateErr.setVisible(false);
        lblDepDateErr.setVisible(false);
        lblRetDateErr.setVisible(false);
        lblDepDateBigErr.setVisible(false);
        dlgAddTrip.setVisible(true);
        //}
    }//GEN-LAST:event_btAddTripActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void dlgAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dlgAddActionPerformed
        try {
            // TODO add your handling code here:
            Trip trip = new Trip();
            String str_Destination = tfDestination.getText();
            String str_TravelName = tfTravelName.getText();
            String str_PassNo = tfPassNo.getText();
            String str_DepDate = tfDepDate.getText();
            String str_RetDate = tfRetDate.getText();

            try {
                dateDepDate = sdf.parse(str_DepDate);
                Date dateDepDate = sdf.parse(str_DepDate);
            } catch (ParseException e) {
                System.out.println("Unparseable date" + str_DepDate);
                lblDepDateErr.setVisible(true);
                return;
            }
            
            try {
                dateRetDate = sdf.parse(str_RetDate);
                Date dateRetDate = sdf.parse(str_RetDate);
            } catch (ParseException e) {
                System.out.println("Unparseable date" + str_DepDate);
                //boolean isRetDateInvalid = false;
                lblRetDateErr.setVisible(true);
                return;
            }
            
            boolean isDateBiger = dateDepDate.before(dateRetDate);
            System.out.println("isDateBiger "+isDateBiger);
            lblDepDateBigErr.setVisible(!isDateBiger);

            boolean isPostcodeInvalid = !str_PassNo.matches("^[A-Za-z]{2}[0-9]{6}$");
            lblPassportNoErr.setVisible(isPostcodeInvalid);
            
            Date dateRetDate = new SimpleDateFormat("yyyy/mm/dd").parse(str_RetDate);
            Date dateDepDate = new SimpleDateFormat("yyyy/mm/dd").parse(str_DepDate);
            
            //if (isDataValid(str_PassNo, lblPassportNoErr, str_DepDate, lblDepDateErr, str_RetDate, lblRetDateErr)) {
                listModelTrip.addElement(new Trip(str_Destination, str_TravelName, str_PassNo, dateDepDate, dateRetDate));
            //}
            

            System.out.println(str_Destination + "pass" + str_TravelName + str_PassNo + dateDepDate + dateRetDate);

            //jListTravel.add(listModeTrip);
        } catch (ParseException ex) {
            Logger.getLogger(Quiz2Travel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_dlgAddActionPerformed

    private void btSaveSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveSelectActionPerformed
        // TODO add your handling code here:
        jFileChooserSave.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));

        if (jFileChooserSave.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jFileChooserSave.getSelectedFile();
            String filePath = currentFile.getAbsolutePath();
            if (!filePath.endsWith(".txt")) {
                currentFile = new File(filePath + ".txt");
            }
            try (PrintWriter pw = new PrintWriter(currentFile)) {
                //pw.write(listModelCar.getElementAt(1));
                int count = listModelTrip.getSize();
                for (int i = 0; i < count; i++) {
                    Trip trip = listModelTrip.elementAt(i);
                    
                    pw.write(trip.toStringSave());
                }
                int i = listModelTrip.getSize();
                System.out.println("Finished write file" + currentFile.getName());

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Unable to write file contents to " + currentFile.getAbsolutePath(),
                        "File access error",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

        }
    }//GEN-LAST:event_btSaveSelectActionPerformed

    private void jListTravelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTravelMouseClicked
        // TODO add your handling code here:
        if ((evt.getButton() == MouseEvent.BUTTON3) && (evt.getClickCount() == 2)) {
           jListTravel.setSelectedIndex(jListTravel.locationToIndex(evt.getPoint()));
            int index = jListTravel.getSelectedIndex();
            //if (index != 1) {
                Trip trip = listModelTrip.get(index);
                // fill in data of Car double-clicked for editing
                dlgAddTrip.setVisible(true);
            //}
        }
    }//GEN-LAST:event_jListTravelMouseClicked

    private void tfDepDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDepDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfDepDateActionPerformed

    /**
     * @param args the command line arguments
     */
    /////////////////////////////////////////////////////
    private boolean isDataValid(String passportNo, JLabel lblPassportNoErr,
            String str_DepDate, JLabel lblDepDateErr, String str_RetDate, JLabel lblRetDateErr) {

        boolean isDepDateInvalid = true;
        boolean isRetDateInvalid = true;
        boolean isPassPortNoInvalid = true;

        boolean isYearInvalid;
        try {
            dateDepDate = sdf.parse(str_DepDate);

            System.out.println("Str Date" + str_DepDate + str_RetDate);
            Date dateRetDate = sdf.parse(str_RetDate);
            System.out.println(dateDepDate);
            System.out.println(dateRetDate);
        } catch (Exception e) {
            System.out.println("dataformat exception");
            isDepDateInvalid = true;
            return (!(isDepDateInvalid || isRetDateInvalid || isPassPortNoInvalid));
        }
        lblDepDateErr.setVisible(isDepDateInvalid);

        try {
            dateRetDate = sdf.parse(str_RetDate);

        } catch (Exception e) {
            System.out.println("dataformat dateRetDate exception");
            isRetDateInvalid = true;
            return (!(isDepDateInvalid || isRetDateInvalid || isPassPortNoInvalid));
        }
        lblRetDateErr.setVisible(isRetDateInvalid);

        boolean isDateBiger = dateDepDate.before(dateRetDate);

        //
        boolean isPostcodeInvalid = !passportNo.matches("^[A-Za-z]{2}[0-9]{6}$");
        lblPassportNoErr.setVisible(isPostcodeInvalid);

        return (!(isDepDateInvalid || isRetDateInvalid || isPassPortNoInvalid));
    }

    //////////////////////////////////////////////////////////////
    final public void centerOnParent(final Window child, final boolean absolute) {
        child.pack();
        boolean useChildsOwner = child.getOwner() != null ? ((child.getOwner() instanceof JFrame) || (child.getOwner() instanceof JDialog)) : false;
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        final Dimension parentSize = useChildsOwner ? child.getOwner().getSize() : screenSize;
        final Point parentLocationOnScreen = useChildsOwner ? child.getOwner().getLocationOnScreen() : new Point(0, 0);
        final Dimension childSize = child.getSize();
        childSize.width = Math.min(childSize.width, screenSize.width);
        childSize.height = Math.min(childSize.height, screenSize.height);
        child.setSize(childSize);
        int x;
        int y;
        if ((child.getOwner() != null) && child.getOwner().isShowing()) {
            x = (parentSize.width - childSize.width) / 2;
            y = (parentSize.height - childSize.height) / 2;
            x += parentLocationOnScreen.x;
            y += parentLocationOnScreen.y;
        } else {
            x = (screenSize.width - childSize.width) / 2;
            y = (screenSize.height - childSize.height) / 2;
        }
        if (!absolute) {
            x /= 2;
            y /= 2;
        }
        child.setLocation(x, y);
    }

    ////////////////////////////////////////////////////
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Quiz2Travel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Quiz2Travel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Quiz2Travel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Quiz2Travel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Quiz2Travel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddTrip;
    private javax.swing.JButton btSaveSelect;
    private javax.swing.JButton dlgAdd;
    private javax.swing.JDialog dlgAddTrip;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooserSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<Trip> jListTravel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDepDateBigErr;
    private javax.swing.JLabel lblDepDateErr;
    private javax.swing.JLabel lblDesErr;
    private javax.swing.JLabel lblPassportNoErr;
    private javax.swing.JLabel lblRetDateErr;
    private javax.swing.JLabel lblTravelNameErr;
    private javax.swing.JTextField tfDepDate;
    private javax.swing.JTextField tfDestination;
    private javax.swing.JTextField tfPassNo;
    private javax.swing.JTextField tfRetDate;
    private javax.swing.JTextField tfTravelName;
    // End of variables declaration//GEN-END:variables
}
